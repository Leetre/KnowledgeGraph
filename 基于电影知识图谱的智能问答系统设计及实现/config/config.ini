[customDict] # 自定义词典路径
genreDictPath = ../data/dict/genreDict.txt
movieDictPath = ../data/dict/movieDict.txt
scoreDictPath = ../data/dict/scoreDict.txt
actorDictPath = ../data/dict/actorDict.txt
placeDictPath = ../data/dict/placeDict.txt

[trainData] # 分类器训练数据路径
label_0_path = ../data/question/【0】评分.txt
label_1_path = ../data/question/【1】上映.txt
label_2_path = ../data/question/【2】风格.txt
label_3_path = ../data/question/【3】剧情.txt
label_4_path = ../data/question/【4】某电影有哪些演员出演.txt
label_5_path = ../data/question/【5】演员简介.txt
label_6_path = ../data/question/【6】某演员出演过的某种类型的电影有哪些.txt
label_7_path = ../data/question/【7】某演员演了什么电影.txt
label_8_path = ../data/question/【8】演员参演的电影评分【大于】.txt
label_9_path = ../data/question/【9】演员参演的电影评分【小于】.txt
label_10_path = ../data/question/【10】某演员出演过哪些类型的电影.txt
label_11_path = ../data/question/【11】演员A和演员B合作了哪些电影.txt
label_12_path = ../data/question/【12】某演员一共演过多少电影.txt
label_13_path = ../data/question/【13】演员出生日期.txt
vocabulary_path = ../data/question/vocabulary.txt
trainDictPath = ../data/question/trainDict.txt

[modelSave] # 分类器模型路径
model_path = ../model/mymodel.pkl

[threshold] # 用于是否接受分类器返回类别的阈值，大于等于该阈值，则接受分类器的结果
threshold = 0.1

[classifierLabelCount] # 存储分类器分类的类别总数
label_count = 14

[neo4j] # neo4j数据库的用户名和密码
username = neo4j
password = neo4j

[rule] # 规则匹配路径
rule_0_path = ../data/rule/rule_0.txt
rule_1_path = ../data/rule/rule_1.txt
rule_2_path = ../data/rule/rule_2.txt
rule_3_path = ../data/rule/rule_3.txt
rule_4_path = ../data/rule/rule_4.txt
rule_5_path = ../data/rule/rule_5.txt
rule_6_path = ../data/rule/rule_6.txt
rule_7_path = ../data/rule/rule_7.txt
rule_8_path = ../data/rule/rule_8.txt

[classifierTemplate] # 分类器模板对应的Cypher语句
label_0_template = match(m:Movie) where m.title="%%s" return m.rating
label_1_template = match(m:Movie) where m.title="%%s" return m.releasedate
label_2_template = match(m:Movie)-[r:is]->(g:Genre) where m.title="%%s"  return g.name
label_3_template = match(m:Movie) where m.title="%%s" return m.introduction
label_4_template = match(p:Actor)-[r:参演]->(m:Movie) where m.title="%%s" return distinct p.name
label_5_template = match(p:Actor) where p.name="%%s" return p.biography
label_6_template = match(p:Actor{name:"%%s"})-[r:参演]->(m:Movie) with m match(m:Movie)-[r:is]->(g:Genre{name:"%%s"}) return m.title
label_7_template = match(p:Actor)-[r:参演]->(m:Movie) where p.name="%%s" return m.title
label_8_template = match(p:Actor)-[r:参演]->(m:Movie) where p.name="%%s" and m.rating >= %%.1f return m.title
label_9_template = match(p:Actor)-[r:参演]->(m:Movie) where p.name="%%s" and m.rating < %%.1f return m.title
label_10_template = match(p:Actor)-[r:参演]->(m:Movie) where p.name="%%s" with m match(m:Movie)-[r:is]->(g:Genre) return distinct g.name
label_11_template = match(p1:Actor)--(m:Movie)--(p2:Actor) where p1.name="%%s" and p2.name="%%s" return m.title
label_12_template = match(p:Actor)-[r:参演]-(m:Movie) where p.name="%%s" return count(m.title)
label_13_template = match(p:Actor) where p.name="%%s" return p.birth

[classifierTemplateSlot] # 分类器模板对应的Cypher语句的槽位标记
label_0_slot = nm
label_1_slot = nm
label_2_slot = nm
label_3_slot = nm
label_4_slot = nm
label_5_slot = nnt
label_6_slot = nnt ng
label_7_slot = nnt
label_8_slot = nnt x
label_9_slot = nnt x
label_10_slot = nnt
label_11_slot = nnt nnt
label_12_slot = nnt
label_13_slot = nnt

[classifierTemplateSearchValue] 分类器模板对应的Cypher语句的查询值标记
label_0_value = m.rating
label_1_value = m.releasedate
label_2_value = g.name
label_3_value = m.introduction
label_4_value = p.name
label_5_value = p.biography
label_6_value = m.title
label_7_value = m.title
label_8_value = m.title
label_9_value = m.title
label_10_value = g.name
label_11_value = m.title
label_12_value = count(m.title)
label_13_value = p.birth

[ruleTemplate] # 规则模板对应的Cypher语句
rule_0_template = match(m:Movie)-[r:is]->(g:Genre) where g.name="%%s" return m.title
rule_1_template = match(m:Movie)-[r:is]->(g:Genre) where g.name="%%s" and m.rating >= %%.1f return m.title
rule_2_template = match(p:Actor)-[r1:参演]->(m:Movie)-[r2:is]->(g:Genre) where g.name="%%s" return distinct p.name
rule_3_template = match(m:Movie) where m.rating >= %%.1f return distinct m.title
rule_4_template = match(m:Movie)-[r:is]->(g:Genre) where g.name = "%%s" and m.rating >= %%.1f return distinct m.title
rule_5_template = match(p:Actor) where p.name="%%s" return p.birthplace
rule_6_template = match(p:Actor)-[r:参演]->(m:Movie) where p.name="%%s" and m.title="%%s" return r.pid
rule_7_template = match(p:Actor)-[r:参演]->(m:Movie) where p.name="%%s" and m.rating >= %%.1f return m.title

[ruleTemplateSlot] # 规则模板对应的Cypher语句的槽位标记
label_0_slot = ng
label_1_slot = ng x
label_2_slot = ng
label_3_slot = x
label_4_slot = ng x
label_5_slot = nnt
label_6_slot = nnt nm
label_7_slot = nnt x

[ruleTemplateSearchValue] # 规则模板对应的Cypher语句的查询值标记
label_0_value = m.title
label_1_value = m.title
label_2_value = p.name
label_3_value = m.title
label_4_value = m.title
label_5_value = p.birthplace
label_6_value = r.pid
label_7_value = m.title

[logConfig] # 日志配置
LOG_PATH = ../log/log
maxBytes = 10240
backupCount = 5
logger_level = 20
logRecord_level = 20
formatter = %%(asctime)s|%%(name)-12s: %%(levelname)-8s %%(message)s